(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('react-jsdom')) :
  typeof define === 'function' && define.amd ? define(['react-jsdom'], factory) :
  (global = global || self, global.$ = factory(global.ReactJSDOM));
}(this, (function (ReactJSDOM) { 'use strict';

  ReactJSDOM = ReactJSDOM && ReactJSDOM.hasOwnProperty('default') ? ReactJSDOM['default'] : ReactJSDOM;

  // This takes a react object like <Button /> and returns the DOM tree
  var render = obj => {
    if (!obj) return [];

    // A react instance, so render it to jsdom:
    if (obj.$$typeof) {
      return [ReactJSDOM.render(obj)];
    }

    // It's already parsed
    return (Array.isArray(obj) ? obj : [obj]).filter(
      obj => typeof obj === "object"
    );
  };

  // In React 16.9 - https://github.com/facebook/react/issues/15379

  const $ = function(obj) {
    if (!(this instanceof $)) return new $(obj);
    this.nodes = render(obj);
    return this;
  };

  $.prototype.first = function() {
    return this.nodes[0] || null;
  };

  $.prototype.last = function() {
    return this.nodes[this.nodes.length - 1] || null;
  };

  $.prototype.attr = function(key) {
    const node = this.first();
    return node && node.getAttribute(key);
  };

  $.prototype.html = function() {
    const node = this.first();
    return node ? node.outerHTML : "";
  };

  $.prototype.text = function() {
    const node = this.first();
    return node ? node.textContent : "";
  };

  $.prototype.find = function(selector) {
    if (!selector) return this;
    const nodes = this.nodes
      .map(node => [...node.querySelectorAll(selector)])
      .flatten(); // So nice :)
    return $(nodes);
  };

  $.prototype.map = function(callback) {
    return this.nodes.map(callback);
  };

  $.prototype.trigger = function(type) {
    return this.map(node => node[type]());
  };

  $.prototype.click = function(selector) {
    return this.find(selector).trigger("click");
  };

  return $;

})));
